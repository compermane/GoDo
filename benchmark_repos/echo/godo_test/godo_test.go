package godo

import (
	"flag"
	"os"
	"testing"

	"github.com/compermane/ic-go/pkg/domain/executor"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

var iteration int

func TestMain(m *testing.M) {
	flag.IntVar(&iteration, "iteration", 1000, "Iteração do algoritmo (benchmarking)",)
	flag.Parse()

	code := m.Run()
	os.Exit(code)
}

func TestGodo(t *testing.T) {
	funcs := []any{
		(*echo.DefaultBinder).BindPathParams,
		(*echo.DefaultBinder).BindQueryParams,
		(*echo.DefaultBinder).BindBody,
		(*echo.DefaultBinder).BindHeaders,
		(*echo.DefaultBinder).Bind,
		echo.NewBindingError,
		(*echo.BindingError).Error,
		echo.QueryParamsBinder,
		echo.PathParamsBinder,
		echo.FormFieldBinder,
		(*echo.ValueBinder).FailFast,
		(*echo.ValueBinder).BindError,
		(*echo.ValueBinder).BindErrors,
		(*echo.ValueBinder).CustomFunc,
		(*echo.ValueBinder).MustCustomFunc,
		(*echo.ValueBinder).String,
		(*echo.ValueBinder).MustString,
		(*echo.ValueBinder).Strings,
		(*echo.ValueBinder).MustStrings,
		(*echo.ValueBinder).BindUnmarshaler,
		(*echo.ValueBinder).MustBindUnmarshaler,
		(*echo.ValueBinder).JSONUnmarshaler,
		(*echo.ValueBinder).MustJSONUnmarshaler,
		(*echo.ValueBinder).TextUnmarshaler,
		(*echo.ValueBinder).MustTextUnmarshaler,
		(*echo.ValueBinder).BindWithDelimiter,
		(*echo.ValueBinder).MustBindWithDelimiter,
		(*echo.ValueBinder).Int64,
		(*echo.ValueBinder).MustInt64,
		(*echo.ValueBinder).Int32,
		(*echo.ValueBinder).MustInt32,
		(*echo.ValueBinder).Int16,
		(*echo.ValueBinder).MustInt16,
		(*echo.ValueBinder).Int8,
		(*echo.ValueBinder).MustInt8,
		(*echo.ValueBinder).Int,
		(*echo.ValueBinder).MustInt,
		(*echo.ValueBinder).Int64s,
		(*echo.ValueBinder).MustInt64s,
		(*echo.ValueBinder).Int32s,
		(*echo.ValueBinder).MustInt32s,
		(*echo.ValueBinder).Int16s,
		(*echo.ValueBinder).MustInt16s,
		(*echo.ValueBinder).Int8s,
		(*echo.ValueBinder).MustInt8s,
		(*echo.ValueBinder).Ints,
		(*echo.ValueBinder).MustInts,
		(*echo.ValueBinder).Uint64,
		(*echo.ValueBinder).MustUint64,
		(*echo.ValueBinder).Uint32,
		(*echo.ValueBinder).MustUint32,
		(*echo.ValueBinder).Uint16,
		(*echo.ValueBinder).MustUint16,
		(*echo.ValueBinder).Uint8,
		(*echo.ValueBinder).MustUint8,
		(*echo.ValueBinder).Byte,
		(*echo.ValueBinder).MustByte,
		(*echo.ValueBinder).Uint,
		(*echo.ValueBinder).MustUint,
		(*echo.ValueBinder).Uint64s,
		(*echo.ValueBinder).MustUint64s,
		(*echo.ValueBinder).Uint32s,
		(*echo.ValueBinder).MustUint32s,
		(*echo.ValueBinder).Uint16s,
		(*echo.ValueBinder).MustUint16s,
		(*echo.ValueBinder).Uint8s,
		(*echo.ValueBinder).MustUint8s,
		(*echo.ValueBinder).Uints,
		(*echo.ValueBinder).MustUints,
		(*echo.ValueBinder).Bool,
		(*echo.ValueBinder).MustBool,
		(*echo.ValueBinder).Bools,
		(*echo.ValueBinder).MustBools,
		(*echo.ValueBinder).Float64,
		(*echo.ValueBinder).MustFloat64,
		(*echo.ValueBinder).Float32,
		(*echo.ValueBinder).MustFloat32,
		(*echo.ValueBinder).Float64s,
		(*echo.ValueBinder).MustFloat64s,
		(*echo.ValueBinder).Float32s,
		(*echo.ValueBinder).MustFloat32s,
		(*echo.ValueBinder).Time,
		(*echo.ValueBinder).MustTime,
		(*echo.ValueBinder).Times,
		(*echo.ValueBinder).MustTimes,
		(*echo.ValueBinder).Duration,
		(*echo.ValueBinder).MustDuration,
		(*echo.ValueBinder).Durations,
		(*echo.ValueBinder).MustDurations,
		(*echo.ValueBinder).UnixTime,
		(*echo.ValueBinder).MustUnixTime,
		(*echo.ValueBinder).UnixTimeMilli,
		(*echo.ValueBinder).MustUnixTimeMilli,
		(*echo.ValueBinder).UnixTimeNano,
		(*echo.ValueBinder).MustUnixTimeNano,
		echo.New,
		(*echo.Echo).NewContext,
		(*echo.Echo).Router,
		(*echo.Echo).Routers,
		(*echo.Echo).DefaultHTTPErrorHandler,
		(*echo.Echo).Pre,
		(*echo.Echo).Use,
		(*echo.Echo).CONNECT,
		(*echo.Echo).DELETE,
		(*echo.Echo).GET,
		(*echo.Echo).HEAD,
		(*echo.Echo).OPTIONS,
		(*echo.Echo).PATCH,
		(*echo.Echo).POST,
		(*echo.Echo).PUT,
		(*echo.Echo).TRACE,
		(*echo.Echo).RouteNotFound,
		(*echo.Echo).Any,
		(*echo.Echo).Match,
		(*echo.Echo).File,
		(*echo.Echo).Add,
		(*echo.Echo).Host,
		(*echo.Echo).Group,
		(*echo.Echo).URI,
		(*echo.Echo).URL,
		(*echo.Echo).Reverse,
		(*echo.Echo).Routes,
		(*echo.Echo).AcquireContext,
		(*echo.Echo).ReleaseContext,
		(*echo.Echo).ServeHTTP,
		(*echo.Echo).Start,
		(*echo.Echo).StartTLS,
		(*echo.Echo).StartAutoTLS,
		(*echo.Echo).StartServer,
		(*echo.Echo).ListenerAddr,
		(*echo.Echo).TLSListenerAddr,
		(*echo.Echo).StartH2CServer,
		(*echo.Echo).Close,
		(*echo.Echo).Shutdown,
		echo.NewHTTPError,
		(*echo.HTTPError).Error,
		(*echo.HTTPError).SetInternal,
		(*echo.HTTPError).WithInternal,
		(*echo.HTTPError).Unwrap,
		echo.WrapHandler,
		echo.WrapMiddleware,
		echo.GetPath,
		(*echo.Echo).Static,
		(*echo.Echo).StaticFS,
		echo.StaticDirectoryHandler,
		(*echo.Echo).FileFS,
		echo.StaticFileHandler,
		echo.MustSubFS,
		(*echo.Group).Use,
		(*echo.Group).CONNECT,
		(*echo.Group).DELETE,
		(*echo.Group).GET,
		(*echo.Group).HEAD,
		(*echo.Group).OPTIONS,
		(*echo.Group).PATCH,
		(*echo.Group).POST,
		(*echo.Group).PUT,
		(*echo.Group).TRACE,
		(*echo.Group).Any,
		(*echo.Group).Match,
		(*echo.Group).Group,
		(*echo.Group).File,
		(*echo.Group).RouteNotFound,
		(*echo.Group).Add,
		(*echo.Group).Static,
		(*echo.Group).StaticFS,
		(*echo.Group).FileFS,
		echo.TrustLoopback,
		echo.TrustLinkLocal,
		echo.TrustPrivateNet,
		echo.TrustIPRange,
		echo.ExtractIPDirect,
		echo.ExtractIPFromRealIPHeader,
		echo.ExtractIPFromXFFHeader,
		(echo.DefaultJSONSerializer).Serialize,
		(echo.DefaultJSONSerializer).Deserialize,
		middleware.BasicAuth,
		middleware.BasicAuthWithConfig,
		middleware.BodyDump,
		middleware.BodyDumpWithConfig,
		middleware.BodyLimit,
		middleware.BodyLimitWithConfig,
		middleware.Gzip,
		middleware.GzipWithConfig,
		middleware.ContextTimeout,
		middleware.ContextTimeoutWithConfig,
		(middleware.ContextTimeoutConfig).ToMiddleware,
		middleware.CORS,
		middleware.CORSWithConfig,
		middleware.CSRF,
		middleware.CSRFWithConfig,
		middleware.Decompress,
		middleware.DecompressWithConfig,
		middleware.CreateExtractors,
		(*middleware.ErrKeyAuthMissing).Error,
		(*middleware.ErrKeyAuthMissing).Unwrap,
		middleware.KeyAuth,
		middleware.KeyAuthWithConfig,
		middleware.Logger,
		middleware.LoggerWithConfig,
		middleware.MethodOverride,
		middleware.MethodOverrideWithConfig,
		middleware.MethodFromHeader,
		middleware.MethodFromForm,
		middleware.MethodFromQuery,
		middleware.DefaultSkipper,
		middleware.NewRandomBalancer,
		middleware.NewRoundRobinBalancer,
		middleware.Proxy,
		middleware.ProxyWithConfig,
		middleware.RateLimiter,
		middleware.RateLimiterWithConfig,
		middleware.NewRateLimiterMemoryStore,
		middleware.NewRateLimiterMemoryStoreWithConfig,
		(*middleware.RateLimiterMemoryStore).Allow,
		middleware.Recover,
		middleware.RecoverWithConfig,
		middleware.HTTPSRedirect,
		middleware.HTTPSRedirectWithConfig,
		middleware.HTTPSWWWRedirect,
		middleware.HTTPSWWWRedirectWithConfig,
		middleware.HTTPSNonWWWRedirect,
		middleware.HTTPSNonWWWRedirectWithConfig,
		middleware.WWWRedirect,
		middleware.WWWRedirectWithConfig,
		middleware.NonWWWRedirect,
		middleware.NonWWWRedirectWithConfig,
		middleware.RequestID,
		middleware.RequestIDWithConfig,
		middleware.RequestLoggerWithConfig,
		(middleware.RequestLoggerConfig).ToMiddleware,
		middleware.Rewrite,
		middleware.RewriteWithConfig,
		middleware.Secure,
		middleware.SecureWithConfig,
		middleware.AddTrailingSlash,
		middleware.AddTrailingSlashWithConfig,
		middleware.RemoveTrailingSlash,
		middleware.RemoveTrailingSlashWithConfig,
		middleware.Static,
		middleware.StaticWithConfig,
		middleware.Timeout,
		middleware.TimeoutWithConfig,
		(middleware.TimeoutConfig).ToMiddleware,
		(*echo.TemplateRenderer).Render,
		echo.NewResponse,
		(*echo.Response).Header,
		(*echo.Response).Before,
		(*echo.Response).After,
		(*echo.Response).WriteHeader,
		(*echo.Response).Write,
		(*echo.Response).Flush,
		(*echo.Response).Hijack,
		(*echo.Response).Unwrap,
		echo.NewRouter,
		(*echo.Router).Routes,
		(*echo.Router).Reverse,
		(*echo.Router).Add,
		(*echo.Router).Find,	
	}
	rcvs := []any{}

	// rcv := receiver.GetReceiver(cobra.Command{})
	// rcv.SetReceiverValues()

	executor.ExecuteFuncs(funcs, rcvs, "feedback_directed", 0, 60, 10, executor.DebugOpts{Dump: true, Debug: false, UseSequenceHashMap: true, Iteration: iteration})
}