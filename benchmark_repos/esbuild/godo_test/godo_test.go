package test

import (
	"flag"
	"os"
	"testing"

	"github.com/compermane/ic-go/pkg/domain/executor"
	"github.com/evanw/esbuild/internal/ast"
	"github.com/evanw/esbuild/internal/bundler"
	"github.com/evanw/esbuild/internal/cache"
	"github.com/evanw/esbuild/internal/cli_helpers"
	"github.com/evanw/esbuild/internal/compat"
	"github.com/evanw/esbuild/internal/config"
	"github.com/evanw/esbuild/internal/css_ast"
	"github.com/evanw/esbuild/internal/css_lexer"
	"github.com/evanw/esbuild/internal/css_parser"
	"github.com/evanw/esbuild/internal/css_printer"
	"github.com/evanw/esbuild/internal/fs"
	"github.com/evanw/esbuild/internal/graph"
	"github.com/evanw/esbuild/internal/helpers"
	"github.com/evanw/esbuild/internal/js_ast"
	"github.com/evanw/esbuild/internal/js_lexer"
	"github.com/evanw/esbuild/internal/js_parser"
	"github.com/evanw/esbuild/internal/js_printer"
	"github.com/evanw/esbuild/internal/linker"
	"github.com/evanw/esbuild/internal/logger"
	"github.com/evanw/esbuild/internal/renamer"
	"github.com/evanw/esbuild/internal/resolver"
	"github.com/evanw/esbuild/internal/runtime"
	"github.com/evanw/esbuild/internal/sourcemap"
	"github.com/evanw/esbuild/internal/xxhash"
	"github.com/evanw/esbuild/pkg/api"
	"github.com/evanw/esbuild/pkg/cli"
)

var iteration int

func TestMain(m *testing.M) {
	flag.IntVar(&iteration, "iteration", 1000, "Iteração do algoritmo (benchmarking)",)
	flag.Parse()

	code := m.Run()
	os.Exit(code)
}

func TestGodo(t *testing.T) {
	funcs := []any{
		(ast.ImportKind).StringForMetafile,
		(ast.ImportKind).IsFromCSS,
		(ast.ImportKind).MustResolveToCSS,
		(ast.ImportRecordFlags).Has,
		(ast.AssertOrWithKeyword).String,
		ast.FindAssertOrWithEntry,
		ast.MakeIndex32,
		(ast.Index32).IsValid,
		(ast.Index32).GetIndex,
		(ast.SymbolKind).IsPrivate,
		(ast.SymbolKind).IsHoisted,
		(ast.SymbolKind).IsHoistedOrFunction,
		(ast.SymbolKind).IsFunction,
		(ast.SymbolKind).IsUnboundOrInjected,
		(ast.SymbolFlags).Has,
		(*ast.Symbol).MergeContentsWith,
		(*ast.Symbol).SlotNamespace,
		(*ast.SlotCounts).UnionMax,
		ast.NewSymbolMap,
		(ast.SymbolMap).Get,
		ast.FollowSymbols,
		ast.FollowAllSymbols,
		ast.MergeSymbols,
		(*ast.CharFreq).Scan,
		(*ast.CharFreq).Include,
		(ast.NameMinifier).ShuffleByCharFreq,
		(ast.NameMinifier).NumberToMinifiedName,
		bundler.ResolveFailureErrorTextSuggestionNotes,
		bundler.RunOnResolvePlugins,
		bundler.HashForFileName,
		bundler.ScanBundle,
		bundler.DefaultExtensionToLoaderMap,
		(*bundler.Bundle).Compile,
		bundler.PathRelativeToOutbase,
		cache.MakeCacheSet,
		(*cache.SourceIndexCache).LenHint,
		(*cache.SourceIndexCache).Get,
		(*cache.SourceIndexCache).GetGlob,
		(*cache.CSSCache).Parse,
		(*cache.JSONCache).Parse,
		(*cache.JSCache).Parse,
		(*cache.FSCache).ReadFile,
		cli_helpers.MakeErrorWithNote,
		cli_helpers.ParseLoader,
		(compat.Semver).String,
		compat.SymbolFeature,
		(compat.CSSFeature).Has,
		(compat.CSSFeature).ApplyOverrides,
		compat.UnsupportedCSSFeatures,
		compat.CSSPrefixData,
		(compat.Engine).String,
		(compat.Engine).IsBrowser,
		(compat.JSFeature).Has,
		(compat.JSFeature).ApplyOverrides,
		compat.UnsupportedJSFeatures,
		(*config.TSConfigJSX).ApplyExtendedConfig,
		(*config.TSConfigJSX).ApplyTo,
		(*config.TSConfig).ApplyExtendedConfig,
		(*config.TSConfig).UnusedImportFlags,
		(config.LegalComments).HasExternalFile,
		(config.Loader).IsTypeScript,
		(config.Loader).IsCSS,
		(config.Loader).CanHaveSourceMap,
		(config.Format).KeepESMImportExportSyntax,
		(config.Format).String,
		(config.ExternalMatchers).HasMatchers,
		(*config.CancelFlag).Cancel,
		(*config.CancelFlag).DidCancel,
		(config.PathPlaceholders).Get,
		config.TemplateToString,
		config.HasPlaceholder,
		config.SubstituteTemplate,
		config.ShouldCallRuntimeRequire,
		config.CompileFilterForPlugin,
		config.PluginAppliesToPath,
		config.PrettyPrintTargetEnvironment,
		(config.DefineFlags).Has,
		config.ProcessDefines,
		(*css_ast.CrossFileEqualityCheck).RefsAreEquivalent,
		(css_ast.Token).Equal,
		css_ast.TokensEqual,
		css_ast.HashTokens,
		(css_ast.Token).EqualIgnoringWhitespace,
		css_ast.TokensEqualIgnoringWhitespace,
		css_ast.TokensAreCommaSeparated,
		(css_ast.Token).NumberOrFractionForPercentage,
		(css_ast.Token).ClampedFractionForPercentage,
		(*css_ast.Token).TurnLengthIntoNumberIfZero,
		(*css_ast.Token).TurnLengthOrPercentageIntoNumberIfZero,
		(css_ast.Token).PercentageValue,
		(css_ast.Token).DimensionValue,
		(css_ast.Token).DimensionUnit,
		(css_ast.Token).DimensionUnitIsSafeLength,
		(css_ast.Token).IsZero,
		(css_ast.Token).IsOne,
		(css_ast.Token).IsAngle,
		css_ast.CloneTokensWithoutImportRecords,
		css_ast.CloneTokensWithImportRecords,
		css_ast.RulesEqual,
		css_ast.HashRules,
		(*css_ast.RAtCharset).Equal,
		(*css_ast.RAtCharset).Hash,
		(*css_ast.ImportConditions).CloneWithImportRecords,
		(*css_ast.RAtImport).Equal,
		(*css_ast.RAtImport).Hash,
		(*css_ast.RAtKeyframes).Equal,
		(*css_ast.RAtKeyframes).Hash,
		(*css_ast.RKnownAt).Equal,
		(*css_ast.RKnownAt).Hash,
		(*css_ast.RUnknownAt).Equal,
		(*css_ast.RUnknownAt).Hash,
		(*css_ast.RSelector).Equal,
		(*css_ast.RSelector).Hash,
		(*css_ast.RQualified).Equal,
		(*css_ast.RQualified).Hash,
		(*css_ast.RDeclaration).Equal,
		(*css_ast.RDeclaration).Hash,
		(*css_ast.RBadDeclaration).Equal,
		(*css_ast.RBadDeclaration).Hash,
		(*css_ast.RComment).Equal,
		(*css_ast.RComment).Hash,
		(*css_ast.RAtLayer).Equal,
		(*css_ast.RAtLayer).Hash,
		css_ast.ComplexSelectorsEqual,
		css_ast.HashComplexSelectors,
		(css_ast.ComplexSelector).CloneWithoutLeadingCombinator,
		(css_ast.ComplexSelector).IsRelative,
		(css_ast.ComplexSelector).UsesPseudoElement,
		(css_ast.ComplexSelector).Equal,
		(*css_ast.CompoundSelector).HasNestingSelector,
		(css_ast.CompoundSelector).IsSingleAmpersand,
		(css_ast.CompoundSelector).IsInvalidBecauseEmpty,
		(css_ast.CompoundSelector).Range,
		(css_ast.CompoundSelector).Clone,
		(css_ast.NameToken).Equal,
		(css_ast.NamespacedName).Range,
		(css_ast.NamespacedName).Clone,
		(css_ast.NamespacedName).Equal,
		(*css_ast.SSHash).Equal,
		(*css_ast.SSHash).Hash,
		(*css_ast.SSHash).Clone,
		(*css_ast.SSClass).Equal,
		(*css_ast.SSClass).Hash,
		(*css_ast.SSClass).Clone,
		(*css_ast.SSAttribute).Equal,
		(*css_ast.SSAttribute).Hash,
		(*css_ast.SSAttribute).Clone,
		(*css_ast.SSPseudoClass).Equal,
		(*css_ast.SSPseudoClass).Hash,
		(*css_ast.SSPseudoClass).Clone,
		(css_ast.PseudoClassKind).HasNthIndex,
		(css_ast.PseudoClassKind).String,
		(*css_ast.NthIndex).Minify,
		(*css_ast.SSPseudoClassWithSelectorList).Equal,
		(*css_ast.SSPseudoClassWithSelectorList).Hash,
		(*css_ast.SSPseudoClassWithSelectorList).Clone,
		css_ast.MaybeCorrectDeclarationTypo,
		(css_lexer.T).String,
		(css_lexer.T).IsNumeric,
		(css_lexer.Token).DecodedText,
		css_lexer.Tokenize,
		css_lexer.WouldStartIdentifierWithoutEscapes,
		css_lexer.RangeOfIdentifier,
		css_lexer.IsNameStart,
		css_lexer.IsNameContinue,
		css_parser.OptionsFromConfig,
		(*css_parser.Options).Equal,
		css_parser.Parse,
		css_parser.MakeDuplicateRuleMangler,
		(*css_parser.DuplicateRuleRemover).RemoveDuplicateRulesInPlace,
		css_printer.Print,
		(*fs.Entry).Kind,
		(*fs.Entry).Symlink,
		fs.MakeEmptyDirEntries,
		(fs.DirEntries).Get,
		(fs.DirEntries).PeekEntryCount,
		(fs.DirEntries).SortedKeys,
		(*fs.InMemoryOpenedFile).Len,
		(*fs.InMemoryOpenedFile).Read,
		(*fs.InMemoryOpenedFile).Close,
		fs.BeforeFileOpen,
		fs.AfterFileClose,
		fs.MkdirAll,
		fs.MockFS,
		fs.RealFS,
		fs.ParseYarnPnPVirtualPath,
		fs.CheckIfWindows,
		fs.CheckIfWindows,
		fs.CheckIfWindows,
		(*graph.LinkerFile).IsEntryPoint,
		(*graph.LinkerFile).IsUserSpecifiedEntryPoint,
		(*graph.LinkerFile).LineColumnTracker,
		graph.CloneLinkerGraph,
		(*graph.LinkerGraph).EntryPoints,
		(*graph.LinkerGraph).AddPartToFile,
		(*graph.LinkerGraph).GenerateNewSymbol,
		(*graph.LinkerGraph).GenerateSymbolImportAndUse,
		(*graph.LinkerGraph).GenerateRuntimeSymbolImportAndUse,
		(*graph.JSRepr).ImportRecords,
		(*graph.JSRepr).TopLevelSymbolToParts,
		(*graph.CSSRepr).ImportRecords,
		(*graph.CopyRepr).ImportRecords,
		helpers.NewBitSet,
		(helpers.BitSet).HasBit,
		(helpers.BitSet).SetBit,
		(helpers.BitSet).Equals,
		(helpers.BitSet).String,
		helpers.EscapeClosingTag,
		helpers.EncodeStringAsShortestDataURL,
		helpers.EncodeStringAsPercentEscapedDataURL,
		helpers.NewF64,
		(helpers.F64).Value,
		(helpers.F64).IsNaN,
		(helpers.F64).Neg,
		(helpers.F64).Abs,
		(helpers.F64).Sin,
		(helpers.F64).Cos,
		(helpers.F64).Log2,
		(helpers.F64).Round,
		(helpers.F64).Floor,
		(helpers.F64).Ceil,
		(helpers.F64).Squared,
		(helpers.F64).Cubed,
		(helpers.F64).Sqrt,
		(helpers.F64).Cbrt,
		(helpers.F64).Add,
		(helpers.F64).AddConst,
		(helpers.F64).Sub,
		(helpers.F64).SubConst,
		(helpers.F64).Mul,
		(helpers.F64).MulConst,
		(helpers.F64).Div,
		(helpers.F64).DivConst,
		(helpers.F64).Pow,
		(helpers.F64).PowConst,
		(helpers.F64).Atan2,
		(helpers.F64).WithSignFrom,
		helpers.Min2,
		helpers.Max2,
		helpers.Min3,
		helpers.Max3,
		helpers.Lerp,
		helpers.ParseGlobPattern,
		helpers.GlobPatternToString,
		helpers.HashCombine,
		helpers.HashCombineString,
		(*helpers.Joiner).AddString,
		(*helpers.Joiner).AddBytes,
		(*helpers.Joiner).LastByte,
		(*helpers.Joiner).Length,
		(*helpers.Joiner).EnsureNewlineAtEnd,
		(*helpers.Joiner).Done,
		(*helpers.Joiner).Contains,
		helpers.MimeTypeByExtension,
		helpers.IsInsideNodeModules,
		helpers.QuoteSingle,
		helpers.QuoteForJSON,
		helpers.MakeSerializer,
		(*helpers.Serializer).Enter,
		(*helpers.Serializer).Leave,
		helpers.PrettyPrintedStack,
		helpers.StringArraysEqual,
		helpers.StringArrayArraysEqual,
		helpers.StringArrayToQuotedCommaSeparatedString,
		(*helpers.Timer).Begin,
		(*helpers.Timer).End,
		(*helpers.Timer).Fork,
		(*helpers.Timer).Join,
		(*helpers.Timer).Log,
		helpers.MakeTypoDetector,
		(helpers.TypoDetector).MaybeCorrectTypo,
		helpers.ContainsNonBMPCodePoint,
		helpers.ContainsNonBMPCodePointUTF16,
		helpers.StringToUTF16,
		helpers.UTF16ToString,
		helpers.UTF16ToStringWithValidation,
		helpers.UTF16EqualsString,
		helpers.UTF16EqualsUTF16,
		helpers.DecodeWTF8Rune,
		(js_ast.OpCode).IsPrefix,
		(js_ast.OpCode).UnaryAssignTarget,
		(js_ast.OpCode).IsLeftAssociative,
		(js_ast.OpCode).IsRightAssociative,
		(js_ast.OpCode).BinaryAssignTarget,
		(js_ast.OpCode).IsShortCircuit,
		(js_ast.PropertyKind).IsMethodDefinition,
		(js_ast.PropertyFlags).Has,
		(*js_ast.ECall).HasSameFlagsAs,
		(*js_ast.EDot).HasSameFlagsAs,
		(*js_ast.EIndex).HasSameFlagsAs,
		(js_ast.AnnotationFlags).Has,
		(js_ast.LocalKind).IsUsing,
		(js_ast.ScopeKind).StopsHoisting,
		(*js_ast.Scope).RecursiveSetStrictMode,
		(js_ast.ExportsKind).IsDynamic,
		(js_ast.ModuleType).IsCommonJS,
		(js_ast.ModuleType).IsESM,
		js_ast.ExprToConstValue,
		js_ast.ConstValueToExpr,
		js_ast.GenerateNonUniqueNameFromPath,
		js_ast.EnsureValidIdentifier,
		js_ast.MakeHelperContext,
		js_ast.IsPropertyAccess,
		js_ast.IsOptionalChain,
		js_ast.Assign,
		js_ast.AssignStmt,
		js_ast.Not,
		js_ast.MaybeSimplifyNot,
		js_ast.MaybeSimplifyEqualityComparison,
		js_ast.IsSymbolInstance,
		js_ast.IsPrimitiveLiteral,
		js_ast.MergedKnownPrimitiveTypes,
		js_ast.KnownPrimitiveType,
		js_ast.CanChangeStrictToLoose,
		js_ast.TypeofWithoutSideEffects,
		js_ast.JoinWithLeftAssociativeOp,
		js_ast.JoinWithComma,
		js_ast.JoinAllWithComma,
		js_ast.ConvertBindingToExpr,
		(js_ast.HelperContext).SimplifyUnusedExpr,
		js_ast.ToInt32,
		js_ast.ToUint32,
		js_ast.ToNumberWithoutSideEffects,
		js_ast.ToStringWithoutSideEffects,
		js_ast.ShouldFoldBinaryOperatorWhenMinifying,
		js_ast.FoldBinaryOperator,
		js_ast.IsBinaryNullAndUndefined,
		js_ast.CheckEqualityBigInt,
		js_ast.CheckEqualityIfNoSideEffects,
		js_ast.ValuesLookTheSame,
		js_ast.TryToInsertOptionalChain,
		js_ast.TryToStringOnNumberSafely,
		js_ast.FoldStringAddition,
		js_ast.InlinePrimitivesIntoTemplate,
		js_ast.ToNullOrUndefinedWithSideEffects,
		js_ast.ToBooleanWithSideEffects,
		(js_ast.HelperContext).SimplifyBooleanExpr,
		(js_ast.HelperContext).StmtsCanBeRemovedIfUnused,
		(js_ast.HelperContext).ClassCanBeRemovedIfUnused,
		(js_ast.HelperContext).ExprCanBeRemovedIfUnused,
		js_ast.StringToEquivalentNumberValue,
		js_ast.InlineSpreadsOfArrayLiterals,
		js_ast.MangleObjectSpread,
		(js_ast.HelperContext).MangleIfExpr,
		js_ast.ForEachIdentifierBindingInDecls,
		js_ast.ForEachIdentifierBinding,
		js_ast.IsIdentifier,
		js_ast.IsIdentifierES5AndESNext,
		js_ast.ForceValidIdentifier,
		js_ast.IsIdentifierUTF16,
		js_ast.IsIdentifierES5AndESNextUTF16,
		js_ast.IsIdentifierStart,
		js_ast.IsIdentifierContinue,
		js_ast.IsIdentifierStartES5AndESNext,
		js_ast.IsIdentifierContinueES5AndESNext,
		js_ast.IsWhitespace,
		(js_lexer.T).IsAssign,
		js_lexer.NewLexer,
		js_lexer.NewLexerGlobalName,
		js_lexer.NewLexerJSON,
		(*js_lexer.Lexer).Loc,
		(*js_lexer.Lexer).Range,
		(*js_lexer.Lexer).Raw,
		(*js_lexer.Lexer).StringLiteral,
		(*js_lexer.Lexer).CookedAndRawTemplateContents,
		(*js_lexer.Lexer).IsIdentifierOrKeyword,
		(*js_lexer.Lexer).IsContextualKeyword,
		(*js_lexer.Lexer).ExpectContextualKeyword,
		(*js_lexer.Lexer).SyntaxError,
		(*js_lexer.Lexer).ExpectedString,
		(*js_lexer.Lexer).Expected,
		(*js_lexer.Lexer).Unexpected,
		(*js_lexer.Lexer).Expect,
		(*js_lexer.Lexer).ExpectOrInsertSemicolon,
		(*js_lexer.Lexer).ExpectLessThan,
		(*js_lexer.Lexer).ExpectGreaterThan,
		js_lexer.RangeOfIdentifier,
		js_lexer.RangeOfImportAssertOrWith,
		(*js_lexer.Lexer).ExpectJSXElementChild,
		(*js_lexer.Lexer).NextJSXElementChild,
		(*js_lexer.Lexer).ExpectInsideJSXElement,
		(*js_lexer.Lexer).NextInsideJSXElement,
		(*js_lexer.Lexer).Next,
		(*js_lexer.Lexer).ScanRegExp,
		(*js_lexer.Lexer).RescanCloseBraceAsTemplateToken,
		(*js_lexer.Lexer).AddRangeErrorWithNotes,
		js_parser.ParseGlobalName,
		js_parser.OptionsForYarnPnP,
		js_parser.OptionsFromConfig,
		(*js_parser.Options).Equal,
		js_parser.Parse,
		js_parser.LazyExportAST,
		js_parser.GlobResolveAST,
		js_parser.ParseDefineExprOrJSON,
		js_parser.ParseJSON,
		js_parser.ParseSourceMap,
		js_printer.QuoteIdentifier,
		js_printer.CanEscapeIdentifier,
		js_printer.Print,
		linker.Link,
		(logger.MsgKind).String,
		(logger.MsgKind).Icon,
		(logger.Range).End,
		(*logger.Range).ExpandBy,
		(logger.SortableMsgs).Len,
		(logger.SortableMsgs).Swap,
		(logger.SortableMsgs).Less,
		(logger.ImportAttributes).DecodeIntoArray,
		(logger.ImportAttributes).DecodeIntoMap,
		logger.EncodeImportAttributes,
		(logger.Path).IsDisabled,
		logger.PlatformIndependentPathDirBaseExt,
		(*logger.Source).TextForRange,
		(*logger.Source).LocBeforeWhitespace,
		(*logger.Source).RangeOfOperatorBefore,
		(*logger.Source).RangeOfOperatorAfter,
		(*logger.Source).RangeOfString,
		(*logger.Source).RangeOfNumber,
		(*logger.Source).RangeOfLegacyOctalEscape,
		(*logger.Source).CommentTextWithoutIndent,
		logger.NewStderrLog,
		logger.PrintErrorToStderr,
		logger.PrintErrorWithNoteToStderr,
		logger.OutputOptionsForArgs,
		logger.PrintMessageToStderr,
		logger.PrintText,
		logger.PrintTextWithColor,
		(logger.SummaryTable).Len,
		(logger.SummaryTable).Swap,
		(logger.SummaryTable).Less,
		logger.PrintSummary,
		logger.NewDeferLog,
		(logger.Msg).String,
		logger.MakeLineColumnTracker,
		(*logger.LineColumnTracker).MsgData,
		(*logger.LineColumnTracker).MsgLocationOrNil,
		(logger.Log).AddError,
		(logger.Log).AddID,
		(logger.Log).AddErrorWithNotes,
		(logger.Log).AddIDWithNotes,
		(logger.Log).AddMsgID,
		logger.GenerateStringInJSTable,
		logger.RemapStringInJSLoc,
		logger.NewStringInJSLog,
		logger.GetTerminalInfo,
		logger.GetTerminalInfo,
		logger.GetTerminalInfo,
		logger.GetTerminalInfo,
		logger.StringToMsgIDs,
		logger.MsgIDToString,
		logger.StringToMaximumMsgID,
		renamer.ComputeReservedNames,
		renamer.NewNoOpRenamer,
		renamer.NewMinifyRenamer,
		(*renamer.MinifyRenamer).NameForSymbol,
		(renamer.StableSymbolCountArray).Len,
		(renamer.StableSymbolCountArray).Swap,
		(renamer.StableSymbolCountArray).Less,
		(*renamer.MinifyRenamer).AccumulateSymbolUseCounts,
		(*renamer.MinifyRenamer).AccumulateSymbolCount,
		(*renamer.MinifyRenamer).AllocateTopLevelSymbolSlots,
		(*renamer.MinifyRenamer).AssignNamesByFrequency,
		renamer.AssignNestedScopeSlots,
		renamer.NewNumberRenamer,
		(*renamer.NumberRenamer).NameForSymbol,
		(*renamer.NumberRenamer).AddTopLevelSymbol,
		(*renamer.NumberRenamer).AssignNamesByScope,
		(*renamer.ExportRenamer).NextRenamedName,
		(*renamer.ExportRenamer).NextMinifiedName,
		resolver.ParseDataURL,
		(resolver.DataURL).DecodeMIMEType,
		(resolver.DataURL).DecodeData,
		(*resolver.PathPair).HasSecondary,
		(resolver.DebugMeta).LogErrorMsg,
		resolver.NewResolver,
		(*resolver.Resolver).Resolve,
		(*resolver.Resolver).ResolveGlob,
		(*resolver.Resolver).ProbeResolvePackageAsRelative,
		resolver.PrettyPath,
		resolver.IsPackagePath,
		(*resolver.TSConfigJSON).TSAlwaysStrictOrStrict,
		resolver.ParseTSConfigJSON,
		runtime.Source,
		(*sourcemap.SourceMap).Find,
		sourcemap.DecodeVLQ,
		sourcemap.DecodeVLQUTF16,
		(sourcemap.LineColumnOffset).ComesBefore,
		(*sourcemap.LineColumnOffset).Add,
		(*sourcemap.LineColumnOffset).AdvanceBytes,
		(*sourcemap.LineColumnOffset).AdvanceString,
		(sourcemap.SourceMapPieces).HasContent,
		(sourcemap.SourceMapPieces).Finalize,
		sourcemap.AppendSourceMapChunk,
		sourcemap.MakeChunkBuilder,
		(*sourcemap.ChunkBuilder).AddSourceMapping,
		(*sourcemap.ChunkBuilder).GenerateChunk,
		xxhash.New,
		(*xxhash.Digest).Reset,
		(*xxhash.Digest).Size,
		(*xxhash.Digest).BlockSize,
		(*xxhash.Digest).Write,
		(*xxhash.Digest).Sum,
		(*xxhash.Digest).Sum64,
		(*xxhash.Digest).MarshalBinary,
		(*xxhash.Digest).UnmarshalBinary,
		xxhash.Sum64,
		api.Build,
		api.Transform,
		(*api.ContextError).Error,
		api.Context,
		api.FormatMessages,
		api.AnalyzeMetafile,
		cli.Run,
		cli.RunWithPlugins,
		cli.ParseBuildOptions,
		cli.ParseTransformOptions,
		cli.ParseServeOptions,	
	}
	// rcv := receiver.GetReceiver(cobra.Command{})
	// rcv.SetReceiverValues()

	executor.ExecuteFuncs(funcs, nil, "feedback_directed", 0, 30, 10, executor.DebugOpts{Dump: true, Debug: false, UseSequenceHashMap: true, Iteration: iteration})
}