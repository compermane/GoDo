package godo_test

import (
	"flag"
	"os"
	"testing"

	"github.com/compermane/ic-go/pkg/domain/executor"
	"github.com/nsqio/nsq/internal/app"
	"github.com/nsqio/nsq/internal/auth"
	"github.com/nsqio/nsq/internal/clusterinfo"
	"github.com/nsqio/nsq/internal/dirlock"
	"github.com/nsqio/nsq/internal/http_api"
	"github.com/nsqio/nsq/internal/lg"
	"github.com/nsqio/nsq/internal/pqueue"
	"github.com/nsqio/nsq/internal/protocol"
	"github.com/nsqio/nsq/internal/quantile"
	"github.com/nsqio/nsq/internal/statsd"
	"github.com/nsqio/nsq/internal/stringy"
	"github.com/nsqio/nsq/internal/util"
	"github.com/nsqio/nsq/internal/writers"
	"github.com/nsqio/nsq/nsqadmin"
	"github.com/nsqio/nsq/nsqd"
	"github.com/nsqio/nsq/nsqlookupd"
)

var iteration int

func TestMain(m *testing.M) {
	flag.IntVar(&iteration, "iteration", 1000, "Iteração do algoritmo (benchmarking)",)
	flag.Parse()

	code := m.Run()
	os.Exit(code)
}

func TestGodo(t *testing.T) {
	funcs := []any{
		(*app.FloatArray).Get,
		(*app.FloatArray).Set,
		(app.FloatArray).Swap,
		(app.FloatArray).Less,
		(app.FloatArray).Len,
		(*app.FloatArray).String,
		(*app.StringArray).Get,
		(*app.StringArray).Set,
		(*app.StringArray).String,
		(*auth.Authorization).HasPermission,
		(*auth.Authorization).IsAllowed,
		(*auth.State).IsAllowed,
		(*auth.State).IsExpired,
		auth.QueryAnyAuthd,
		auth.QueryAuthd,
		(clusterinfo.ErrList).Error,
		(clusterinfo.ErrList).Errors,
		clusterinfo.New,
		(*clusterinfo.ClusterInfo).GetVersion,
		(*clusterinfo.ClusterInfo).GetLookupdTopics,
		(*clusterinfo.ClusterInfo).GetLookupdTopicChannels,
		(*clusterinfo.ClusterInfo).GetLookupdProducers,
		(*clusterinfo.ClusterInfo).GetLookupdTopicProducers,
		(*clusterinfo.ClusterInfo).GetNSQDTopics,
		(*clusterinfo.ClusterInfo).GetNSQDProducers,
		(*clusterinfo.ClusterInfo).GetNSQDTopicProducers,
		(*clusterinfo.ClusterInfo).GetNSQDStats,
		(*clusterinfo.ClusterInfo).TombstoneNodeForTopic,
		(*clusterinfo.ClusterInfo).CreateTopicChannel,
		(*clusterinfo.ClusterInfo).DeleteTopic,
		(*clusterinfo.ClusterInfo).DeleteChannel,
		(*clusterinfo.ClusterInfo).PauseTopic,
		(*clusterinfo.ClusterInfo).UnPauseTopic,
		(*clusterinfo.ClusterInfo).PauseChannel,
		(*clusterinfo.ClusterInfo).UnPauseChannel,
		(*clusterinfo.ClusterInfo).EmptyTopic,
		(*clusterinfo.ClusterInfo).EmptyChannel,
		(*clusterinfo.ClusterInfo).GetProducers,
		(*clusterinfo.ClusterInfo).GetTopicProducers,
		(clusterinfo.ProducerTopics).Len,
		(clusterinfo.ProducerTopics).Swap,
		(clusterinfo.ProducerTopics).Less,
		(*clusterinfo.Producer).UnmarshalJSON,
		(*clusterinfo.Producer).Address,
		(*clusterinfo.Producer).HTTPAddress,
		(*clusterinfo.Producer).TCPAddress,
		(*clusterinfo.Producer).IsInconsistent,
		(*clusterinfo.TopicStats).Add,
		(*clusterinfo.ChannelStats).Add,
		(*clusterinfo.ClientStats).UnmarshalJSON,
		(*clusterinfo.ClientStats).HasUserAgent,
		(*clusterinfo.ClientStats).HasSampleRate,
		(clusterinfo.ChannelStatsList).Len,
		(clusterinfo.ChannelStatsList).Swap,
		(clusterinfo.ChannelStatsByHost).Less,
		(clusterinfo.ClientStatsList).Len,
		(clusterinfo.ClientStatsList).Swap,
		(clusterinfo.ClientsByHost).Less,
		(clusterinfo.TopicStatsList).Len,
		(clusterinfo.TopicStatsList).Swap,
		(clusterinfo.TopicStatsByHost).Less,
		(clusterinfo.Producers).Len,
		(clusterinfo.Producers).Swap,
		(clusterinfo.Producers).HTTPAddrs,
		(clusterinfo.Producers).Search,
		(clusterinfo.ProducersByHost).Less,
		dirlock.New,
		(*dirlock.DirLock).Lock,
		(*dirlock.DirLock).Unlock,
		dirlock.New,
		(*dirlock.DirLock).Lock,
		(*dirlock.DirLock).Unlock,
		dirlock.New,
		(*dirlock.DirLock).Lock,
		(*dirlock.DirLock).Unlock,
		http_api.NewDeadlineTransport,
		http_api.NewClient,
		(*http_api.Client).GETV1,
		(*http_api.Client).POSTV1,
		(http_api.Err).Error,
		http_api.PlainText,
		http_api.V1,
		http_api.RespondV1,
		http_api.Decorate,
		http_api.Log,
		http_api.LogPanicHandler,
		http_api.LogNotFoundHandler,
		http_api.LogMethodNotAllowedHandler,
		http_api.CompressHandler,
		http_api.Serve,
		http_api.NewReqParams,
		(*http_api.ReqParams).Get,
		(*http_api.ReqParams).GetAll,
		http_api.GetTopicChannelArgs,
		(lg.NilLogger).Output,
		(*lg.LogLevel).Get,
		(*lg.LogLevel).Set,
		(*lg.LogLevel).String,
		lg.ParseLogLevel,
		lg.Logf,
		pqueue.New,
		(pqueue.PriorityQueue).Len,
		(pqueue.PriorityQueue).Less,
		(pqueue.PriorityQueue).Swap,
		(*pqueue.PriorityQueue).Push,
		(*pqueue.PriorityQueue).Pop,
		(*pqueue.PriorityQueue).PeekAndShift,
		protocol.ByteToBase10,
		(*protocol.ClientErr).Error,
		(*protocol.ClientErr).Parent,
		protocol.NewClientErr,
		protocol.IsValidTopicName,
		protocol.IsValidChannelName,
		protocol.SendResponse,
		protocol.SendFramedResponse,
		protocol.TCPServer,
		(*quantile.E2eProcessingLatencyAggregate).UnmarshalJSON,
		(*quantile.E2eProcessingLatencyAggregate).Len,
		(*quantile.E2eProcessingLatencyAggregate).Swap,
		(*quantile.E2eProcessingLatencyAggregate).Less,
		(*quantile.E2eProcessingLatencyAggregate).Add,
		(*quantile.Result).String,
		quantile.New,
		(*quantile.Quantile).Result,
		(*quantile.Quantile).Insert,
		(*quantile.Quantile).QueryHandler,
		(*quantile.Quantile).IsDataStale,
		(*quantile.Quantile).Merge,
		statsd.NewClient,
		(*statsd.Client).Incr,
		(*statsd.Client).Decr,
		(*statsd.Client).Timing,
		(*statsd.Client).Gauge,
		statsd.HostKey,
		stringy.Add,
		stringy.Union,
		stringy.Uniq,
		stringy.NanoSecondToHuman,
		util.UniqRands,
		util.TypeOfAddr,
		(*util.WaitGroupWrapper).Wrap,
		writers.NewBoundaryBufferedWriter,
		(*writers.BoundaryBufferedWriter).Write,
		(*writers.BoundaryBufferedWriter).Flush,
		writers.NewSpreadWriter,
		(*writers.SpreadWriter).Write,
		(*writers.SpreadWriter).Flush,
		nsqadmin.NewSingleHostReverseProxy,
		nsqadmin.NewHTTPServer,
		nsqadmin.New,
		(*nsqadmin.NSQAdmin).RealHTTPAddr,
		(*nsqadmin.NSQAdmin).Main,
		(*nsqadmin.NSQAdmin).Exit,
		nsqadmin.NewOptions,
		nsqd.NewChannel,
		(*nsqd.Channel).Exiting,
		(*nsqd.Channel).Delete,
		(*nsqd.Channel).Close,
		(*nsqd.Channel).Empty,
		(*nsqd.Channel).Depth,
		(*nsqd.Channel).Pause,
		(*nsqd.Channel).UnPause,
		(*nsqd.Channel).IsPaused,
		(*nsqd.Channel).PutMessage,
		(*nsqd.Channel).PutMessageDeferred,
		(*nsqd.Channel).TouchMessage,
		(*nsqd.Channel).FinishMessage,
		(*nsqd.Channel).RequeueMessage,
		(*nsqd.Channel).AddClient,
		(*nsqd.Channel).RemoveClient,
		(*nsqd.Channel).StartInFlightTimeout,
		(*nsqd.Channel).StartDeferredTimeout,
		(nsqd.ClientV2Stats).String,
		nsqd.NewGUIDFactory,
		nsqd.NewMessage,
		(*nsqd.Message).WriteTo,
		nsqd.New,
		(*nsqd.NSQD).RealTCPAddr,
		(*nsqd.NSQD).RealHTTPAddr,
		(*nsqd.NSQD).RealHTTPSAddr,
		(*nsqd.NSQD).SetHealth,
		(*nsqd.NSQD).IsHealthy,
		(*nsqd.NSQD).GetError,
		(*nsqd.NSQD).GetHealth,
		(*nsqd.NSQD).GetStartTime,
		(*nsqd.NSQD).Main,
		(*nsqd.NSQD).LoadMetadata,
		(*nsqd.NSQD).GetMetadata,
		(*nsqd.NSQD).PersistMetadata,
		(*nsqd.NSQD).Exit,
		(*nsqd.NSQD).GetTopic,
		(*nsqd.NSQD).GetExistingTopic,
		(*nsqd.NSQD).DeleteExistingTopic,
		(*nsqd.NSQD).Notify,
		(*nsqd.NSQD).IsAuthEnabled,
		(*nsqd.NSQD).Context,
		nsqd.NewOptions,
		nsqd.NewTopicStats,
		nsqd.NewChannelStats,
		(nsqd.Topics).Len,
		(nsqd.Topics).Swap,
		(nsqd.TopicsByName).Less,
		(nsqd.Channels).Len,
		(nsqd.Channels).Swap,
		(nsqd.ChannelsByName).Less,
		(*nsqd.NSQD).GetStats,
		(nsqd.Uint64Slice).Len,
		(nsqd.Uint64Slice).Swap,
		(nsqd.Uint64Slice).Less,
		nsqd.NewTopic,
		(*nsqd.Topic).Start,
		(*nsqd.Topic).Exiting,
		(*nsqd.Topic).GetChannel,
		(*nsqd.Topic).GetExistingChannel,
		(*nsqd.Topic).DeleteExistingChannel,
		(*nsqd.Topic).PutMessage,
		(*nsqd.Topic).PutMessages,
		(*nsqd.Topic).Depth,
		(*nsqd.Topic).Delete,
		(*nsqd.Topic).Close,
		(*nsqd.Topic).Empty,
		(*nsqd.Topic).AggregateChannelE2eProcessingLatency,
		(*nsqd.Topic).Pause,
		(*nsqd.Topic).UnPause,
		(*nsqd.Topic).IsPaused,
		(*nsqd.Topic).GenerateID,
		nsqlookupd.NewClientV1,
		(*nsqlookupd.ClientV1).String,
		(*nsqlookupd.LookupProtocolV1).NewClient,
		(*nsqlookupd.LookupProtocolV1).IOLoop,
		(*nsqlookupd.LookupProtocolV1).Exec,
		(*nsqlookupd.LookupProtocolV1).REGISTER,
		(*nsqlookupd.LookupProtocolV1).UNREGISTER,
		(*nsqlookupd.LookupProtocolV1).IDENTIFY,
		(*nsqlookupd.LookupProtocolV1).PING,
		nsqlookupd.New,
		(*nsqlookupd.NSQLookupd).Main,
		(*nsqlookupd.NSQLookupd).RealTCPAddr,
		(*nsqlookupd.NSQLookupd).RealHTTPAddr,
		(*nsqlookupd.NSQLookupd).Exit,
		nsqlookupd.NewOptions,
		(*nsqlookupd.Producer).String,
		(*nsqlookupd.Producer).Tombstone,
		(*nsqlookupd.Producer).IsTombstoned,
		nsqlookupd.NewRegistrationDB,
		(*nsqlookupd.RegistrationDB).AddRegistration,
		(*nsqlookupd.RegistrationDB).AddProducer,
		(*nsqlookupd.RegistrationDB).RemoveProducer,
		(*nsqlookupd.RegistrationDB).RemoveRegistration,
		(*nsqlookupd.RegistrationDB).FindRegistrations,
		(*nsqlookupd.RegistrationDB).FindProducers,
		(*nsqlookupd.RegistrationDB).LookupRegistrations,
		(nsqlookupd.Registration).IsMatch,
		(nsqlookupd.Registrations).Filter,
		(nsqlookupd.Registrations).Keys,
		(nsqlookupd.Registrations).SubKeys,
		(nsqlookupd.Producers).FilterByActive,
		(nsqlookupd.Producers).PeerInfo,
		nsqlookupd.ProducerMap2Slice,				
	}

	executor.ExecuteFuncs(funcs, nil, "feedback_directed", 0, 60 * 10, 10, executor.DebugOpts{Dump: true, Debug: false, UseSequenceHashMap: true, Iteration: iteration})
}