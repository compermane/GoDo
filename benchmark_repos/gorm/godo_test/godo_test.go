package test

import (
	"flag"
	"os"
	"testing"

	"github.com/compermane/ic-go/pkg/domain/executor"
	"gorm.io/gorm"
	"gorm.io/gorm/callbacks"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/migrator"
	"gorm.io/gorm/schema"
	"gorm.io/gorm/utils"
)

var iteration int

func TestMain(m *testing.M) {
	flag.IntVar(&iteration, "iteration", 1000, "Iteração do algoritmo (benchmarking)",)
	flag.Parse()

	code := m.Run()
	os.Exit(code)
}

func TestGodo(t *testing.T) {
	funcs := []any{
		(*gorm.DB).Association,
		(*gorm.Association).Unscoped,
		(*gorm.Association).Find,
		(*gorm.Association).Append,
		(*gorm.Association).Replace,
		(*gorm.Association).Delete,
		(*gorm.Association).Clear,
		(*gorm.Association).Count,
		callbacks.SaveBeforeAssociations,
		callbacks.SaveAfterAssociations,
		callbacks.RegisterDefaultCallbacks,
		callbacks.BeforeCreate,
		callbacks.Create,
		callbacks.AfterCreate,
		callbacks.ConvertToCreateValues,
		callbacks.BeforeDelete,
		callbacks.DeleteBeforeAssociations,
		callbacks.Delete,
		callbacks.AfterDelete,
		callbacks.ConvertMapToValuesForCreate,
		callbacks.ConvertSliceOfMapToValuesForCreate,
		callbacks.Query,
		callbacks.BuildQuerySQL,
		callbacks.Preload,
		callbacks.AfterQuery,
		callbacks.RawExec,
		callbacks.RowQuery,
		callbacks.BeginTransaction,
		callbacks.CommitOrRollbackTransaction,
		callbacks.SetupUpdateReflectValue,
		callbacks.BeforeUpdate,
		callbacks.Update,
		callbacks.AfterUpdate,
		callbacks.ConvertToAssignments,
		(*gorm.DB).Model,
		(*gorm.DB).Clauses,
		(*gorm.DB).Table,
		(*gorm.DB).Distinct,
		(*gorm.DB).Select,
		(*gorm.DB).Omit,
		(*gorm.DB).MapColumns,
		(*gorm.DB).Where,
		(*gorm.DB).Not,
		(*gorm.DB).Or,
		(*gorm.DB).Joins,
		(*gorm.DB).InnerJoins,
		(*gorm.DB).Group,
		(*gorm.DB).Having,
		(*gorm.DB).Order,
		(*gorm.DB).Limit,
		(*gorm.DB).Offset,
		(*gorm.DB).Scopes,
		(*gorm.DB).Preload,
		(*gorm.DB).Attrs,
		(*gorm.DB).Assign,
		(*gorm.DB).Unscoped,
		(*gorm.DB).Raw,
		(clause.Clause).Build,
		(clause.Delete).Name,
		(clause.Delete).Build,
		(clause.Delete).MergeClause,
		(clause.Expr).Build,
		(clause.NamedExpr).Build,
		(clause.IN).Build,
		(clause.IN).NegationBuild,
		(clause.Eq).Build,
		(clause.Eq).NegationBuild,
		(clause.Neq).Build,
		(clause.Neq).NegationBuild,
		(clause.Gt).Build,
		(clause.Gt).NegationBuild,
		(clause.Gte).Build,
		(clause.Gte).NegationBuild,
		(clause.Lt).Build,
		(clause.Lt).NegationBuild,
		(clause.Lte).Build,
		(clause.Lte).NegationBuild,
		(clause.Like).Build,
		(clause.Like).NegationBuild,
		(clause.From).Name,
		(clause.From).Build,
		(clause.From).MergeClause,
		(clause.GroupBy).Name,
		(clause.GroupBy).Build,
		(clause.GroupBy).MergeClause,
		(clause.Insert).Name,
		(clause.Insert).Build,
		(clause.Insert).MergeClause,
		(clause.Join).Build,
		(clause.Limit).Name,
		(clause.Limit).Build,
		(clause.Limit).MergeClause,
		(clause.Locking).Name,
		(clause.Locking).Build,
		(clause.Locking).MergeClause,
		(clause.OnConflict).Name,
		(clause.OnConflict).Build,
		(clause.OnConflict).MergeClause,
		(clause.OrderBy).Name,
		(clause.OrderBy).Build,
		(clause.OrderBy).MergeClause,
		(clause.Returning).Name,
		(clause.Returning).Build,
		(clause.Returning).MergeClause,
		(clause.Select).Name,
		(clause.Select).Build,
		(clause.Select).MergeClause,
		(clause.CommaExpression).Build,
		(clause.Set).Name,
		(clause.Set).Build,
		(clause.Set).MergeClause,
		clause.Assignments,
		clause.AssignmentColumns,
		(clause.Update).Name,
		(clause.Update).Build,
		(clause.Update).MergeClause,
		(clause.Values).Name,
		(clause.Values).Build,
		(clause.Values).MergeClause,
		(clause.Where).Name,
		(clause.Where).Build,
		(clause.Where).MergeClause,
		clause.And,
		(clause.AndConditions).Build,
		clause.Or,
		(clause.OrConditions).Build,
		clause.Not,
		(clause.NotConditions).Build,
		(*gorm.DB).Create,
		(*gorm.DB).CreateInBatches,
		(*gorm.DB).Save,
		(*gorm.DB).First,
		(*gorm.DB).Take,
		(*gorm.DB).Last,
		(*gorm.DB).Find,
		(*gorm.DB).FindInBatches,
		(*gorm.DB).FirstOrInit,
		(*gorm.DB).FirstOrCreate,
		(*gorm.DB).Update,
		(*gorm.DB).Updates,
		(*gorm.DB).UpdateColumn,
		(*gorm.DB).UpdateColumns,
		(*gorm.DB).Delete,
		(*gorm.DB).Count,
		(*gorm.DB).Row,
		(*gorm.DB).Rows,
		(*gorm.DB).Scan,
		(*gorm.DB).Pluck,
		(*gorm.DB).ScanRows,
		(*gorm.DB).Connection,
		(*gorm.DB).Transaction,
		(*gorm.DB).Begin,
		(*gorm.DB).Commit,
		(*gorm.DB).Rollback,
		(*gorm.DB).SavePoint,
		(*gorm.DB).RollbackTo,
		(*gorm.DB).Exec,
		(*gorm.Config).Apply,
		(*gorm.Config).AfterInitialize,
		gorm.Open,
		(*gorm.DB).Session,
		(*gorm.DB).WithContext,
		(*gorm.DB).Debug,
		(*gorm.DB).Set,
		(*gorm.DB).Get,
		(*gorm.DB).InstanceSet,
		(*gorm.DB).InstanceGet,
		(*gorm.DB).Callback,
		(*gorm.DB).AddError,
		(*gorm.DB).DB,
		gorm.Expr,
		(*gorm.DB).SetupJoinTable,
		(*gorm.DB).Use,
		(*gorm.DB).ToSQL,
		(migrator.ColumnType).Name,
		(migrator.ColumnType).DatabaseTypeName,
		(migrator.ColumnType).ColumnType,
		(migrator.ColumnType).PrimaryKey,
		(migrator.ColumnType).AutoIncrement,
		(migrator.ColumnType).Length,
		(migrator.ColumnType).DecimalSize,
		(migrator.ColumnType).Nullable,
		(migrator.ColumnType).Unique,
		(migrator.ColumnType).ScanType,
		(migrator.ColumnType).Comment,
		(migrator.ColumnType).DefaultValue,
		(migrator.Index).Table,
		(migrator.Index).Name,
		(migrator.Index).Columns,
		(migrator.Index).PrimaryKey,
		(migrator.Index).Unique,
		(migrator.Index).Option,
		(migrator.Migrator).RunWithValue,
		(migrator.Migrator).DataTypeOf,
		(migrator.Migrator).FullDataTypeOf,
		(migrator.Migrator).GetQueryAndExecTx,
		(migrator.Migrator).AutoMigrate,
		(migrator.Migrator).GetTables,
		(migrator.Migrator).CreateTable,
		(migrator.Migrator).DropTable,
		(migrator.Migrator).HasTable,
		(migrator.Migrator).RenameTable,
		(migrator.Migrator).AddColumn,
		(migrator.Migrator).DropColumn,
		(migrator.Migrator).AlterColumn,
		(migrator.Migrator).HasColumn,
		(migrator.Migrator).RenameColumn,
		(migrator.Migrator).MigrateColumn,
		(migrator.Migrator).MigrateColumnUnique,
		(migrator.Migrator).ColumnTypes,
		(migrator.Migrator).CreateView,
		(migrator.Migrator).DropView,
		(migrator.Migrator).GuessConstraintAndTable,
		(migrator.Migrator).GuessConstraintInterfaceAndTable,
		(migrator.Migrator).CreateConstraint,
		(migrator.Migrator).DropConstraint,
		(migrator.Migrator).HasConstraint,
		(migrator.Migrator).BuildIndexOptions,
		(migrator.Migrator).CreateIndex,
		(migrator.Migrator).DropIndex,
		(migrator.Migrator).HasIndex,
		(migrator.Migrator).RenameIndex,
		(migrator.Migrator).CurrentDatabase,
		(migrator.Migrator).ReorderModels,
		(migrator.Migrator).CurrentTable,
		(migrator.Migrator).GetIndexes,
		(migrator.Migrator).GetTypeAliases,
		(migrator.Migrator).TableType,
		(migrator.TableType).Schema,
		(migrator.TableType).Name,
		(migrator.TableType).Type,
		(migrator.TableType).Comment,
		(*gorm.DB).Migrator,
		(*gorm.DB).AutoMigrate,
		gorm.NewPreparedStmtDB,
		(*gorm.PreparedStmtDB).GetDBConn,
		(*gorm.PreparedStmtDB).Close,
		(*gorm.PreparedStmtDB).Reset,
		(*gorm.PreparedStmtDB).BeginTx,
		(*gorm.PreparedStmtDB).ExecContext,
		(*gorm.PreparedStmtDB).QueryContext,
		(*gorm.PreparedStmtDB).QueryRowContext,
		(*gorm.PreparedStmtDB).Ping,
		(*gorm.PreparedStmtTX).GetDBConn,
		(*gorm.PreparedStmtTX).Commit,
		(*gorm.PreparedStmtTX).Rollback,
		(*gorm.PreparedStmtTX).ExecContext,
		(*gorm.PreparedStmtTX).QueryContext,
		(*gorm.PreparedStmtTX).QueryRowContext,
		(*gorm.PreparedStmtTX).Ping,
		gorm.Scan,
		(*schema.CheckConstraint).GetName,
		(*schema.CheckConstraint).Build,
		(*schema.Schema).ParseCheckConstraints,
		(*schema.UniqueConstraint).GetName,
		(*schema.UniqueConstraint).Build,
		(*schema.Schema).ParseUniqueConstraints,
		(*schema.Field).BindName,
		(*schema.Schema).ParseField,
		(*schema.Schema).ParseIndexes,
		(*schema.Schema).LookIndex,
		(schema.NamingStrategy).TableName,
		(schema.NamingStrategy).SchemaName,
		(schema.NamingStrategy).ColumnName,
		(schema.NamingStrategy).JoinTableName,
		(schema.NamingStrategy).RelationshipFKName,
		(schema.NamingStrategy).CheckerName,
		(schema.NamingStrategy).IndexName,
		(schema.NamingStrategy).UniqueName,
		(*schema.Constraint).GetName,
		(*schema.Constraint).Build,
		(*schema.Relationship).ParseConstraint,
		(*schema.Relationship).ToQueryConditions,
		(schema.Schema).String,
		(schema.Schema).MakeSlice,
		(schema.Schema).LookUpField,
		(schema.Schema).LookUpFieldByBindName,
		schema.Parse,
		schema.ParseWithSpecialTableName,
		schema.RegisterSerializer,
		schema.GetSerializer,
		(schema.JSONSerializer).Scan,
		(schema.JSONSerializer).Value,
		(schema.UnixSecondSerializer).Scan,
		(schema.UnixSecondSerializer).Value,
		(schema.GobSerializer).Scan,
		(schema.GobSerializer).Value,
		schema.ParseTagSetting,
		schema.GetRelationsValues,
		schema.GetIdentityFieldValuesMap,
		schema.GetIdentityFieldValuesMapFromValues,
		schema.ToQueryValues,
		(*gorm.DeletedAt).Scan,
		(gorm.DeletedAt).Value,
		(gorm.DeletedAt).MarshalJSON,
		(*gorm.DeletedAt).UnmarshalJSON,
		(gorm.DeletedAt).QueryClauses,
		(gorm.SoftDeleteQueryClause).Name,
		(gorm.SoftDeleteQueryClause).Build,
		(gorm.SoftDeleteQueryClause).MergeClause,
		(gorm.SoftDeleteQueryClause).ModifyStatement,
		(gorm.DeletedAt).UpdateClauses,
		(gorm.SoftDeleteUpdateClause).Name,
		(gorm.SoftDeleteUpdateClause).Build,
		(gorm.SoftDeleteUpdateClause).MergeClause,
		(gorm.SoftDeleteUpdateClause).ModifyStatement,
		(gorm.DeletedAt).DeleteClauses,
		(gorm.SoftDeleteDeleteClause).Name,
		(gorm.SoftDeleteDeleteClause).Build,
		(gorm.SoftDeleteDeleteClause).MergeClause,
		(gorm.SoftDeleteDeleteClause).ModifyStatement,
		(*gorm.Statement).WriteString,
		(*gorm.Statement).WriteByte,
		(*gorm.Statement).WriteQuoted,
		(*gorm.Statement).QuoteTo,
		(*gorm.Statement).Quote,
		(*gorm.Statement).AddVar,
		(*gorm.Statement).AddClause,
		(*gorm.Statement).AddClauseIfNotExists,
		(*gorm.Statement).BuildCondition,
		(*gorm.Statement).Build,
		(*gorm.Statement).Parse,
		(*gorm.Statement).ParseWithSpecialTableName,
		(*gorm.Statement).SetColumn,
		(*gorm.Statement).Changed,
		(*gorm.Statement).SelectAndOmitColumns,
		utils.FileWithLineNum,
		utils.IsValidDBNameChar,
		utils.CheckTruth,
		utils.ToStringKey,
		utils.Contains,
		utils.AssertEqual,
		utils.ToString,
		utils.NestedRelationName,
		utils.SplitNestedRelationName,
		utils.JoinNestedRelationNames,
		
	} 

	// rcv := receiver.GetReceiver(cobra.Command{})
	// rcv.SetReceiverValues()

	executor.ExecuteFuncs(funcs, nil, "feedback_directed", 0, 15, 10, executor.DebugOpts{Dump: true, Debug: false, UseSequenceHashMap: true, Iteration: iteration})
}